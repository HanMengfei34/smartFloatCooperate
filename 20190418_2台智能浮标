# -*- coding: utf-8 -*-
"""
Created on Mon Apr  8 08:55:21 2019

@author: 6
"""
'''考虑虚拟领导者和浮标之间的力，但是力的公式使用的是浮标间的力的公式'''
import math
import netCDF4
import numpy as np  
import os
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap
from PIL import Image
import gc

a=6378137.0;
#地球参数
π=math.pi;
ρ = 206264.806247096355;

'''*****************************开始****智能浮标动力模型**********************************************'''
def Power_Model(start_B,start_L,angle):
    depth=100
    start_x=Translate_to_XY(start_B,start_L)[0]
    start_y=Translate_to_XY(start_B,start_L)[1]
#    end_x=Translate_to_XY(end_B,end_L)[0]
#    end_y=Translate_to_XY(end_B,end_L)[1]
    pitch_angle=Hudu(30)
    dive_speed=0.29
    S=Anti_angle_judge(angle)
    start_angle=Hudu(Anti_angle_judge(angle))
    C=math.cos(Hudu(90))
#航向角度计算完毕
    dive_u=dive_speed*math.cos(pitch_angle)*C
    dive_v=dive_speed*math.cos(pitch_angle)*math.sin(start_angle)

    #时间计算按ABCD公式计算出来的
    time= 2 * depth / (math.sin(pitch_angle) * dive_speed)

    delta_y=dive_v*time
    delta_x=dive_u*time
    middle_x=start_x+delta_x
    middle_y=start_y+delta_y
    '''dive_speed应改为dive_speed和洋流的和速度2019/2/28'''
    middle_B=Translate_to_BL(middle_x,middle_y)[0]
    middle_L=Translate_to_BL(middle_x,middle_y)[1]
    list_waypoint=[]
    list_waypoint.append(middle_B)
    list_waypoint.append(middle_L)
    return list_waypoint
'''*****************************结束****智能浮标动力模型**********************************************'''
   
#xy转为大地坐标系BL
def Translate_to_BL(x,y):
    list_BL=[]
    D=-y/a
    B=π/2-2*math.atan(math.pow(math.exp(1),D))
    L=x/a
    L=Anti_Hudu(L)
    B=Anti_Hudu(B)
    list_BL.append(B)
    list_BL.append(L)
    return list_BL
    
#大地坐标系BL转为xy
def Translate_to_XY(B,L):
    list_XY=[]
    L=Hudu(L)
    B=Hudu(B)
    x=a*L
    y=a*math.log(math.tan(π/4+B/2))
    list_XY.append(x)
    list_XY.append(y)
    return list_XY
    
#弧度转角度
def Anti_Hudu(x):
    x=x/(2*π)*360
    return x
    
#角度转弧度
def Hudu(x):
    x=x/360*2*π
    return x
    
#角度正北化(-180-180转化为0-360)
def Angle_judge(angle):
    if angle>0:
        if angle>90:
            angle=360-(angle-90)
        else:
            angle=90-angle
    else:
        angle=90-angle
    return angle
#角度反正北化(0-360转化为-180-180)
def Anti_angle_judge(angle):
    if angle>270:
        angle=450-angle
    else:
        angle=90-angle
    return angle
def Distance(lat1,lon1,lat2,lon2):
    lat1_rad=Hudu(lat1)
    lon1_rad=Hudu(lon1)
    lat2_rad=Hudu(lat2)
    lon2_rad=Hudu(lon2)
    delta_a=lat1_rad-lat2_rad
    delta_b=lon1_rad-lon2_rad
    s=2 * math.asin(math.sqrt(math.pow(math.sin(delta_a / 2), 2) + math.cos(lat1_rad) * math.cos(lat2_rad) * math.pow(math.sin(delta_b / 2), 2)))
    s=s*6378137
    return s    
#势函数关于距离求导得到，向量方向的加速度
#两个浮标之间的势函数求导
def V_V(X):
    a,b,d0,d1,aa1=4,5,3,5,1
    if X>0 and X<=a:
        v_a=-2*aa1*(X-d0*d0/X)
    elif X>a and a<=d1:
        C=π*(X-b)/(2*(a-b))
        B=math.sin(C)
        v_a=-2*aa1*math.pow(B,2)*(X-d0*d0/X)
    elif X>d1:
        v_a=0
    return v_a   
#浮标和虚拟领导者之间的势函数的求导
#def V_V(X):
#    a,b,h0,h1,aa1=4,5,0,5,1
#    if X<=a:
#        v_b=aa1*X
#    elif X>a and a<=h1:
#        C=π*(h1-X)/(a-h1)
#        B=math.cos(C)
#        v_b=aa1*(1/2*X-1/2*X*B)
#    elif X>h1:
#        v_b=0
#    return v_b 
def Distance_xy(x1,y1,x2,y2):   
    a=math.sqrt(math.pow(x2-x1,2)+math.pow(y2-y1,2))
    return (a)
def plot_picture(x1,y1,x2,y2,x3,y3,x4,y4,v,c):
#    传入点不是要画的点，左边的点变了右边的点未变的连线
    temp_a=[]
    for i in range(0,401):
        X1=Distance_xy(x1,y1,x2,y2)
        X2=Distance_xy(x1,y1,x3,y3)
        X3=Distance_xy(x1,y1,x4,y4)
        pointa=V_V(X1)
        pointb=V_V(X2)
        pointc=V_V(X3)
        x_v=(x2-x1)*pointa/X1
        y_v=(y2-y1)*pointa/X1+v
        xb_v=(x3-x1)*pointb/X2
        yb_v=(y3-y1)*pointb/X2+v
        xc_v=(x4-x1)*pointc/X3
        yc_v=(y4-y1)*pointc/X3+v
        xx2=x2+x_v*0.25
        yy2=y2+y_v*0.25
        xx3=x3+xb_v*0.25
        yy3=y3+yb_v*0.25
        xx4=x4+xc_v*0.25
        yy4=y4+yc_v*0.25
        x2=xx2
        y2=yy2
        x3=xx3
        y3=yy3
        x4=xx4
        y4=yy4
    x11=[xx2,xx3,xx4,xx2]
    y11=[yy2,yy3,yy4,yy2]
    plt.plot(x11,y11,c)
    temp_a.append(xx2)
    temp_a.append(yy2)
    temp_a.append(xx3)
    temp_a.append(yy3)
    temp_a.append(xx4)
    temp_a.append(yy4)
    return temp_a
   
if __name__ == '__main__':
    fig = plt.figure(figsize=(8,8))
    ax1=fig.add_axes([0.1,0.1,0.8,0.8])
    plt.xlim(-20,20)
    plt.ylim(-20,20)
    plt.grid(True)
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('A simple plot')
    t_a=[] 
    t_b=[]
    t_c=[]
    t_d=[]
    t_e=[]
    
    x=[1,7,4,1]
    y=[1,1,4,1]
    plt.plot(x,y,'go-')
    v=0.01
    t_a=plot_picture(4,2,x[0],y[0],x[1],y[1],x[2],y[2],v,c='bo-')
    t_b=plot_picture(4,3,t_a[0],t_a[1],t_a[2],t_a[3],t_a[4],t_a[5],v,c='ko-')
    t_c=plot_picture(4,4,t_b[0],t_b[1],t_b[2],t_b[3],t_b[4],t_b[5],v,c='ro-')
    t_d=plot_picture(4,5,t_c[0],t_c[1],t_c[2],t_c[3],t_c[4],t_c[5],v,c='mo-')
    t_e=plot_picture(4,6,t_d[0],t_d[1],t_d[2],t_d[3],t_d[4],t_d[5],v,c='go-')
    t_f=plot_picture(4,7,t_e[0],t_e[1],t_e[2],t_e[3],t_e[4],t_e[5],v,c='bo-')
#    t_g=plot_picture(4,8,t_f[0],t_f[1],t_f[2],t_f[3],t_f[4],t_f[5],v,c='ro-')
#    t_h=plot_picture(4,9,t_g[0],t_g[1],t_g[2],t_g[3],t_g[4],t_g[5],v,c='mo-')
#    t_i=plot_picture(4,10,t_h[0],t_h[1],t_h[2],t_h[3],t_h[4],t_h[5],v,c='go-')
#    t_a=plot_picture(2,2,x[1],y[1],v,c='bo-')
#    t_b=plot_picture(3,3,t_a[0],t_a[1],v,c='ko-')
#    t_c=plot_picture(4,4,t_b[0],t_b[1],v,c='ro-')
#    t_d=plot_picture(5,5,t_c[0],t_c[1],v,c='mo-')
#    t_e=plot_picture(6,6,t_d[0],t_d[1],v,c='go-')
#    t_f=plot_picture(7,7,t_e[0],t_e[1],v,c='bo-')
#    t_g=plot_picture(8,8,t_f[0],t_f[1],v,c='ro-')
#    t_h=plot_picture(9,9,t_g[0],t_g[1],v,c='mo-')
#    t_i=plot_picture(10,10,t_h[0],t_h[1],v,c='go-')
    a = np.array([1,2])
    b = np.array([3,4])
    ax1.arrow(0, 0, 0, 3, length_includes_head=True,head_width=0.25, head_length=0.5, ec='b')

#    100s走1，所以速度为0.01m/s
#    X=Distance_xy(1,2.8,4,3)
##    假设速度为0.02m/s，运动0.2为10s
#    point2a=V_V(X)
#    x11=[1,3.741]
#    y11=[2.8,2.7827]
#    plt.plot(x11,y11,'go-')
#    
#    X1=Distance_xy(1,2.6,3.741,2.7827)
#    point2a=V_V(X1)
#    x11=[1,3.741]
#    y11=[2.6,2.7827]
#    plt.plot(x11,y11,'go-')
#    map=Basemap(projection = 'cyl',llcrnrlon = 119.75, llcrnrlat = 29.5, urcrnrlon = 120.5, urcrnrlat=30.25)
##    map.drawcoastlines()
##    map.drawmapboundary(fill_color='#84c1ff')
##    map.fillcontinents(color='grey')
#    map.drawparallels(np.arange(29.5,30.25,0.25),labels=[1,0,0,0],fontsize=15) 
#    map.drawmeridians(np.arange(119.75,120.5,0.25),labels=[0,1,0,1],fontsize=15) 
##    level=np.linspace(0.0,0.225,16)
#    start_B1,start_L1,start_B2,start_L2=30,120,30,120.05
#    y1,x1=map(start_L1,start_B1)
#    y2,x2=map(start_L2,start_B2)
#    x=[x1,x2]
#    y=[y1,y2]
#    ax1.plot(y,x,'go-')
#    '''初始位置可视化结束'''
#    
#    temp_B=Power_Model(start_B1,start_L1,180)[0]
#    temp_L=Power_Model(start_B1,start_L1,180)[1]
#    y3,x3=map(temp_L,temp_B)
#    distance=Distance(temp_B,temp_L,start_B2,start_L2)
#    temp_a=V_V(distance)
#    '''在这里调用求吸引力引起的加速度的函数'''
#    y4,x4=map(120.05,29.98)
#    x=[x3,x4]
#    y=[y3,y4]
#    ax1.plot(y,x,'go-')
